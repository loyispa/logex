name: Build Native Executable

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 0 * * 0' # Runs every Sunday at midnight UTC

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Delete old pre-releases
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
            });

            const preReleases = releases.data.filter(release => 
              release.tag_name.startsWith('prerelease-v')
            ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            // Keep only the latest pre-release
            for (let i = 1; i < preReleases.length; i++) {
              const releaseToDelete = preReleases[i];
              console.log(`Deleting old pre-release: ${releaseToDelete.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: releaseToDelete.id,
              });
              // Also delete the tag associated with the release
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `tags/${releaseToDelete.tag_name}`,
              });
            }

  build:
    needs: cleanup # Ensure cleanup runs before build
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            target_name: logex-exporter

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and GraalVM
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'
          cache: 'maven'

      - name: Get Project Version
        id: get_version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Build native executable
        run: mvn -Pnative package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: prerelease-v${{ steps.get_version.outputs.version }}
          release_name: Pre-release Build v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: true

      - name: Upload native executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.target_name }}
          asset_name: ${{ matrix.target_name }}
          asset_content_type: application/octet-stream